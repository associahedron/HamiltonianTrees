{"version":3,"file":"bundle.js","sources":["src/codeword.js","src/geometry.js","src/polygon.js","src/menu.js","src/input.js","src/button.js","src/tree.js","codewords.js","src/index.js"],"sourcesContent":["/**\n * @param {number} n  N-polygon sides\n * @return {number[][]} All valid codewords for an N-polygon\n */\nexport function getCodeWords(n) {\n  const UP = 0;\n  const DOWN = 1;\n\n  let codeword = new Array(n).fill(-1);\n  let direction = new Array(n).fill(-1);\n  let pushPoint = new Array(n).fill(-1);\n  let maxValue = new Array(n).fill(-1);\n  let codeWordList = [];\n\n  function initialize() {\n    codeword[0] = n - 1;\n    for (let j = 1; j < n; j++) {\n      codeword[j] = 0;\n      pushPoint[j] = 0;\n    }\n    codeWordList.push([...codeword]);\n  }\n\n  function generate_all_trees(position) {\n    if (position === 0) {\n      return;\n    }\n\n    if (position === n - 1) {\n      maxValue[position] = 1;\n    } else if (position !== 0) {\n      maxValue[position] =\n        maxValue[position + 1] +\n        1 -\n        codeword[position + 1];\n    }\n\n    if (codeword[position] == 0) {\n      direction[position] = UP;\n    } else {\n      direction[position] = DOWN;\n    }\n\n    generate_all_trees(position - 1);\n\n    for (let i = 0; i < maxValue[position]; i++) {\n      if (direction[position] == UP) {\n        pull(position, pushPoint[position]);\n      } else {\n        push(position, pushPoint[position]);\n      }\n      generate_all_trees(position - 1);\n    }\n\n    if (position !== n - 1) {\n      if (direction[position] == UP) {\n        pushPoint[position + 1] = position;\n      } else {\n        pushPoint[position + 1] =\n          pushPoint[position];\n      }\n    }\n  }\n\n  function push(i, j) {\n    codeword[i] = codeword[i] - 1;\n    codeword[j] = codeword[j] + 1;\n    codeWordList.push([...codeword]);\n  }\n\n  function pull(i, j) {\n    codeword[i] = codeword[i] + 1;\n    codeword[j] = codeword[j] - 1;\n    codeWordList.push([...codeword]);\n  }\n\n  initialize();\n  generate_all_trees(n - 1);\n\n  return codeWordList;\n}\n// Implementation of Lemma 1: (Valid Codewords) [Zerling]\n// NOTE THAT THIS COULD BE MORE EFFICIENT...\n// Note that codeword should equal to n-gon sides - 2 (n)\n// Example: cw = [3, 0, 0, 0], n = 4\n// This is valid!\nexport function isValidCodeword(cw, n) {\n  let isValid = true;\n  let nums = cw.map((v) => +v);\n  for (let i = 1; i < n - 1; i++) {\n    let sum = 0;\n    for (let j = i + 1; j < n; j++) {\n      sum += nums[j];\n    }\n    let wi = nums[i];\n    if (wi > n - i - sum) {\n      isValid = false;\n    }\n  }\n\n  let s = 0;\n  for (let j = 1; j < n; j++) {\n    s += nums[j];\n  }\n\n  let w0 = nums[0];\n  if (w0 != n - 1 - s) {\n    isValid = false;\n  }\n\n  return isValid;\n}\n","import { range } from 'd3'\n\n// https://github.com/associahedron/convexpolygonexplore/blob/81e57b2e5f98c1575c8601c2be784c90304e1236/codewords.py#L38\n\n\nconst formatKey = (start, end) => {\n  return `${start},${end}`\n}\n\nconst keyFromArr = (arr) => {\n  return arr.join(',')\n}\n\nconst parseKey = (key) => {\n  return key.split(',').map((v) => +v)\n}\n\nconst idxFunction = (N) => (idx) => idx % N\n\nconst isPolygonEdge = (i1, i2, N) => {\n  const getWrapIndex = idxFunction(N)\n  return getWrapIndex(i1 + 1) == i2\n}\n\n/**\n * @typedef {Object} Point \n * @property {number} x\n * @property {number} y\n */\n\n/**\n * @typedef {Object} Edge \n * @property {Point} p1\n * @property {Point} p2\n * @property {Point} midpoint The midpoint of the edge\n * @property {number} start_idx The index of p1 in the polygon\n * @property {number} end_idx The index of p2 in the polygon\n * @property {number} depth The depth of the edge in the tree\n * @property {number} distance The distance between p1 and p2\n * @property {() => string} getKey The key of edge using the start index and end index\n */\n\n/**\n * @typedef {Object} Triangle \n * @property {Point} p1\n * @property {Point} p2\n * @property {Point} p3\n * @property {() => Point} getCentroid\n */\n\n/**\n * @param {Point} p1 \n * @param {Point} p2\n * @param {number} start The index of p1 in the polygon\n * @param {number} end The index of p2 in the polygon\n * @param {number} depth The depth of the edge in the tree\n * @return {Edge} All valid codewords for an N-polygon\n */\nconst createEdge = (p1, p2, start, end, depth = -1) => {\n  let x = (p1.x + p2.x) / 2;\n  let y = (p1.y + p2.y) / 2;\n  let x_diff = p1.x - p2.x;\n  let y_diff = p1.y - p2.y;\n  let dist = Math.hypot(x_diff, y_diff);\n  return {\n    p1,\n    p2,\n    midpoint: { x, y },\n    dist,\n    start_idx: start,\n    end_idx: end,\n    getKey: () => `${start},${end}`,\n    depth,\n  };\n};\n\n/**\n * @param {number} N The number of sides\n * @param {number} r The radius of the polygon\n * @param {number} leftOffset The x offset\n * @param {number} topOffset The y offset\n * @return {number[]} A list of vertices for the polygon\n */\nexport const createPolygonPoints = (N, r, leftOffset, topOffset) => {\n  let points = [];\n  let inc = (2 * Math.PI) / N;\n  for (let i = 0; i < N; i++) {\n    let theta = inc * (i + 1) + (Math.PI * 3) / 2 - inc / 2;\n\n    let r_x = r + leftOffset;\n    let r_y = r + topOffset;\n\n    let x = r * Math.cos(theta) + r_x;\n    let y = r * Math.sin(theta) + r_y;\n\n    let vec_x = x - r_x;\n    let vec_y = y - r_y;\n    let mag = Math.sqrt(vec_x * vec_x + vec_y * vec_y);\n    let ux = vec_x / mag;\n    let uy = vec_y / mag;\n\n    // TODO Refactor to remove unit vector\n    let point = { x, y, ux, uy };\n    points.push(point);\n  }\n  points.reverse();\n  return points;\n};\n\n/**\n * @param {Point[]} points A list of points for an N-gon\n * @return {Edge[]} A list of edges for that N-gon\n */\nexport const createPolygonEdges = (points) => {\n  let edges = [];\n  const N = points.length;\n  for (let i = 0; i < N; i++) {\n    let curr_point = points[i];\n\n    let next_point_idx = (i + 1) % N;\n    let next_point = points[next_point_idx];\n    let edge = createEdge(curr_point, next_point, i, next_point_idx);\n    edges.push(edge);\n  }\n  return edges;\n};\n\n\n/*\nNODES\n\"0,6\": Object { right: \"1,6\", parent: \"7,0\", depth: 1, … }\n\"1,4\": Object { right: \"2,4\", parent: \"1,5\", depth: 4, … }\n\"1,5\": Object { left: \"1,4\", parent: \"1,6\", depth: 3, … }\n\"1,6\": Object { left: \"1,5\", parent: \"0,6\", depth: 2, … }\n\"2,4\": Object { parent: \"1,4\", depth: 5, value: \"2,4\", … }\n\"7,0\": Object { left: \"0,6\", value: \"7,0\", depth: 0, … }\n*/\n// TODO REFACTOR THIS\n\n/**\n * @param {Point} p1 \n * @param {Point} p2\n * @property {number} start The index of p1 in the polygon\n * @property {number} end The index of p2 in the polygon\n * @property {number} depth The depth of the edge in the tree\n * @return {Edge} All valid codewords for an N-polygon\n */\n\n// Solution is the edges of the tree\n// Nodes is a dictionary with the index and end index being the key and {\"left\":null,\"right\":null,\"parent\":\"1,4\",\"depth\":4,\"value\":\"2,4\"}\n\nexport const createTriangles = (codeword, polygonEdges, interiorEdges, points) => {\n  if (!interiorEdges.length) return { solution: [], maxDepth: 1, nodes: null, triangles: {}};\n\n  let interiorMap = {};\n\n  let N = polygonEdges.length;\n  let interiorN = interiorEdges.length;\n\n  for (let i = 0; i < interiorN; i++) {\n    let edge = interiorEdges[i];\n    let key = edge.getKey()\n    interiorMap[key] = edge;\n  }\n\n\n  for (let i = 0; i < polygonEdges.length; i++) {\n    let edge = polygonEdges[i];\n    let key = edge.getKey();\n    interiorMap[key] = edge;\n  }\n\n  const rootKey = `${N - 1},0`\n  // console.log(JSON.stringify(interiorMap), \"INTERIOR MAP\")\n  \n  const getWrapIndex = idxFunction(N);\n  \n  const fillCrossings = (crossings, start, end) => {\n    for (let i = start + 1; i < end; i++) {\n      crossings[getWrapIndex(i)] = true;\n    }\n  };\n\n  let nodes = {};\n\n  for (let i = 0; i < polygonEdges.length; i++) {\n    let edge = polygonEdges[i];\n    let key = edge.getKey();\n    nodes[key] = {\n      left: null,\n      right: null,\n      parent: null,\n      depth: 0,\n      value: key,\n      leaf: true,\n      inorderPos: null,\n    }\n  }\n\n  let triangles = [];\n\n  let crossings = new Array(N).fill(false);\n\n  let polyEdgesUsed = new Array(N).fill(false);\n\n  let used = new Set(range(N));\n\n  let edgeStack = [];\n  let startIndex = codeword.length - 1;\n\n  let iterOrder = []\n\n  for (let i = startIndex; i >= 0; i--) {\n    let point = i;\n    let code = codeword[i];\n\n    let edgePoint = point + 2;\n    while (code > 0) {\n      let ind = getWrapIndex(edgePoint);\n      // If there are no crossing at the index, then it's a valid edge\n      if (!crossings[ind]) {\n        let tri = [];\n        tri.push([point, ind]);\n        code--;\n        fillCrossings(crossings, point, edgePoint);\n\n        let key = formatKey(point, ind)\n        let node = {\n          left: null,\n          right: null,\n          parent: null,\n          depth: 0,\n          value: key,\n          leaf: false,\n          inorderPos: null,\n        }\n        nodes[key] = node;\n\n        let checkRange = range(point, edgePoint).map((e) => getWrapIndex(e));\n        for (let j = 0; j < checkRange.length; j++) {\n          let edge = checkRange[j];\n          // IF the edge is not used, add it to the triangle\n          if (!polyEdgesUsed[edge]) {\n            polyEdgesUsed[edge] = true;\n            \n            tri.push([edge, getWrapIndex(edge + 1)]);\n            // let childKey = formatKey(edge, getWrapIndex(edge + 1));\n            let parentKey = formatKey(point, ind);\n            iterOrder.push(parentKey)\n            used.delete(edge);\n          }\n        }\n        \n        // If we don't make a triangle, then we know we have to use the interior edges\n        while (tri.length < 3) {\n          let e = edgeStack.pop();\n          // let childKey = formatKey(e[0], e[1])\n          let parentKey = formatKey(point, ind)\n          iterOrder.push(parentKey)\n          tri.push(e);\n        }\n\n        triangles.push(tri);\n\n        edgeStack.push([point, ind]);\n      }\n      edgePoint++;\n    }\n  }\n\n  let rootNode = {\n    left: null,\n    right: null,\n    parent: null,\n    value: rootKey,\n    depth: 0,\n    leaf: false\n  }\n\n  nodes[rootKey] = rootNode;\n\n  // ==== ADD THE LAST TRIANGLE IN THE STACK\n  let lastTriangle = [];\n  while (edgeStack.length) {\n    let e = edgeStack.pop();\n    lastTriangle.push(e);\n  }\n\n  used.forEach((value) => {\n    lastTriangle.push([value, getWrapIndex(value + 1)]);\n  });\n\n  triangles.push(lastTriangle);\n  iterOrder.push(rootKey)\n  triangles.reverse()\n  iterOrder.reverse()\n  iterOrder = Array.from(new Set(iterOrder))\n  for (let i = 0; i < iterOrder.length; i++) {\n    let triangleIndexes = triangles[i]\n\n    let parentKey = iterOrder[i]\n    let parentArr = parseKey(parentKey)\n\n    for (let j = 0; j < triangleIndexes.length; j++) {\n      let indexes = triangleIndexes[j]\n      let triKey = keyFromArr(indexes)\n      if (triKey == parentKey) {\n        continue\n      } else {\n        nodes[triKey].parent = parentKey;\n        if (i == 0) {\n          if (indexes[0] == parentArr[1]) {\n            nodes[parentKey].left = triKey\n          } else {\n            nodes[parentKey].right = triKey\n          }\n        } else {\n          if (indexes[0] == parentArr[0]) {\n            nodes[parentKey].left = triKey;\n          } else {\n            nodes[parentKey].right = triKey;\n          }\n        }\n      } \n    }\n  }\n  const tris = createTriangleFromIndex(triangles, points, iterOrder)\n  let solution = [];\n\n  let maxDepth = 1;\n\n  let start = rootKey;\n\n  // Solution is the edges of the tree\n  // Nodes is a dictionary with the index and end index being the key and {\"left\":null,\"right\":null,\"parent\":\"1,4\",\"depth\":4,\"value\":\"2,4\"}\n  function bfs() {\n    let queue = [start];\n\n    // Create the first edge from the root to first centroid\n    let e = createEdge(\n      interiorMap[start].midpoint,\n      tris[start].getCentroid(),\n      -1,\n      -1,\n      0\n    );\n    solution.push(e);\n\n    while (queue.length > 0) {\n      let n = queue.shift();\n      let node = nodes[n];\n      let currEdge = interiorMap[n];\n\n      if (node.left) {\n        let neighborEdge = interiorMap[node.left];\n\n        let startPoint = currEdge.midpoint\n        let endPoint = neighborEdge.midpoint\n\n        if (n in tris) {\n          startPoint = tris[n].getCentroid()\n        }\n        if (node.left in tris) {\n          endPoint = tris[node.left].getCentroid()\n        }\n        \n        let neighborNode = nodes[node.left];\n        neighborNode.depth = node.depth + 1;\n        maxDepth = Math.max(maxDepth, node.depth + 1);\n        let e = createEdge(\n          startPoint,\n          endPoint,\n          -1,\n          -1,\n          node.depth + 1\n        );\n        queue.push(node.left);\n        solution.push(e);\n      }\n\n      if (node.right) {\n        let neighborEdge = interiorMap[node.right];\n        let startPoint = currEdge.midpoint\n        let endPoint = neighborEdge.midpoint\n\n        if (n in tris) {\n          startPoint = tris[n].getCentroid()\n        }\n        if (node.right in tris) {\n          endPoint = tris[node.right].getCentroid()\n        }\n        \n        let neighborNode = nodes[node.right];\n        neighborNode.depth = node.depth + 1;\n        maxDepth = Math.max(maxDepth, node.depth + 1);\n        let e = createEdge(\n          startPoint,\n          endPoint,\n          -1,\n          -1,\n          node.depth + 1\n        );\n        queue.push(node.right);\n        solution.push(e);\n      }\n    }\n  }\n\n  bfs(nodes, start, 0, interiorMap);\n  return { solution, maxDepth, nodes, triangles: tris };\n};\n\n\nexport const getCodewordEdges = (points, codeword) => {\n  const N = points.length;\n  const getWrapIndex = idxFunction(N)\n\n  const fillCrossings = (crossings, start, end) => {\n    for (let i = start + 1; i < end; i++) {\n      crossings[getWrapIndex(i)] = true;\n    }\n  };\n  const findCodeEdges = (crossings, point, code) => {\n    // Offset by 2 vertices since edges cannot be next to each other\n    let edgePoint = point + 2;\n    let edges = [];\n    while (code > 0) {\n      let ind = getWrapIndex(edgePoint);\n      // If there are no crossing at the index, then it's a valid edge\n      if (!crossings[ind]) {\n        edges.push(getWrapIndex(ind));\n        code--;\n        fillCrossings(crossings, point, edgePoint);\n      }\n      edgePoint++;\n    }\n    return edges;\n  };\n\n  let all_edges = [];\n  let crossings = new Array(N).fill(false);\n  let startIndex = codeword.length - 1;\n  for (let i = startIndex; i >= 0; i--) {\n    let code = codeword[i];\n    let edges = findCodeEdges(crossings, i, code);\n    for (let j = 0; j < edges.length; j++) {\n      let edge = edges[j];\n      let p1 = points[i];\n      let p2 = points[edge];\n      let e = createEdge(p1, p2, i, edge);\n      all_edges.push(e);\n    }\n  }\n\n  return all_edges;\n};\n\n\n/**\n * @param {Point} p1 \n * @param {Point} p2\n * @param {Point} p3\n * @return {Point} The centroid\n */\nconst centroid = (p1, p2, p3) => {\n  const x = (p1.x + p2.x + p3.x) / 3\n  const y = (p1.y + p2.y + p3.y) / 3\n  const centroid = { x, y }\n  return centroid\n};\n\n\n/**\n * @param {number[][]} triIndexes The triangle represented by the edge indexes\n * [[1, 2], [2, 3], [3, 1]] \n * @param {Point[]} points The list of points of an N-gon\n * @return {Triangle[]} The centroid\n */\nconst createTriangleFromIndex = (triIndexes, points, iterOrder) => {\n  let triangles = {}\n  for (let i = 0; i < iterOrder.length; i++) {\n    const currEdge = iterOrder[i]\n    const triangleIndexes = triIndexes[i]\n    let indexSet = new Set()\n    for (let j = 0; j < triangleIndexes.length; j++) {\n\n      const indexes = triangleIndexes[j]\n      indexSet.add(indexes[0])\n      indexSet.add(indexes[1])\n    }\n\n    let arr = Array.from(indexSet)\n    let p1 = points[arr[0]]\n    let p2 = points[arr[1]]\n    let p3 = points[arr[2]]\n    let tri = createTriangle(p1, p2, p3)\n    triangles[currEdge] = tri\n  }\n\n  return triangles\n}\n\n\n/**\n * @typedef {Object} Triangle \n * @param {Point} p1\n * @param {Point} p2\n * @param {Point} p3\n * @return {Triangle}\n */\nconst createTriangle = (p1, p2, p3) => {\n  return {\n    p1, p2, p3,\n    getCentroid: () => centroid(p1, p2, p3)\n  }\n}\n\n// 20020, 10120\n// 2,0,1,0, 1,0,2,0\n","import { transition, line, dispatch } from \"d3\";\n\nimport {\n  createPolygonPoints,\n  createPolygonEdges,\n  getCodewordEdges,\n  createTriangles,\n} from \"./geometry\";\n\n/**\n * The order of the edges in e2 is as closely matched to e1 as much as possible\n * If there are at least 2 edge differences, the original e2 is returned\n * Otherwise, an ordered e2 is return\n * @param {Object[]} e1 The previous interior edges\n * @param {Object[]} e2 The current interior edges\n * @return {Object[]} All valid codewords for an N-polygon\n */\nconst positionEdges = (e1, e2) => {\n\n  if (e1 == null || e1.length == 0) return e2;\n  // console.log(JSON.stringify(e1.map(d => (\"\" + d.start_idx + d.end_idx))), \"PREVIOUS\")\n\n  // console.log(JSON.stringify(e2.map(d => (\"\" + d.start_idx + d.end_idx))), \"CURRENT\")\n\n  // 20020, 10120\n  // 2010, 1020\n\n\n  let new_res = new Array(e1.length).fill(-1);\n  let numbers = Array.from(Array(e1.length).keys());\n  let unusedIndex = new Set(numbers);\n\n  let idxDict = {};\n  for (let i = 0; i < e1.length; i++) {\n    let { start_idx, end_idx } = e1[i];\n    let key = \"\" + start_idx + end_idx;\n    idxDict[key] = i;\n  }\n\n  let count = 0;\n  let unused = null;\n  for (let j = 0; j < e2.length; j++) {\n    let { start_idx, end_idx } = e2[j];\n    let key = \"\" + start_idx + end_idx;\n    if (idxDict[key] == undefined) {\n      unused = e2[j];\n      count += 1;\n    } else if (idxDict[key] !== j) {\n      new_res[idxDict[key]] = e2[j];\n      unusedIndex.delete(idxDict[key]);\n    } else {\n      new_res[j] = e2[j];\n      unusedIndex.delete(j);\n    }\n  }\n\n  if (count > 1) return e2;\n\n  let keys = unusedIndex.keys();\n  let value = keys.next().value;\n\n  new_res[value] = unused;\n  return new_res;\n};\n\nexport const polygon = () => {\n  let N;\n  let codeword;\n  let color;\n  let pointColor;\n  let radius;\n  let pointSize;\n  let margin;\n  let transDuration;\n  let strokeWidth;\n  let dash;\n  let fontSize;\n\n  let drawDelay;\n\n  let lastEdges;\n\n  let interp;\n  let treeInterp;\n\n  let nodes;\n  let treePath = [];\n\n  const listeners = dispatch(\"animstart\", \"animend\");\n\n  const my = (selection) => {\n    let points = createPolygonPoints(N, radius, margin.left, margin.top);\n    let polygonEdges = createPolygonEdges(points);\n    let interiorEdges = getCodewordEdges(points, codeword);\n\n    // NOTE: This code is very dangerous, refactor later\n    if (lastEdges != null) {\n      interiorEdges = positionEdges(lastEdges, interiorEdges);\n    }\n\n    treePath = []\n\n    let triangles = []\n\n    let maxDepth = 1;\n    if (interiorEdges) {\n      let treeInfo = createTriangles(codeword, polygonEdges, interiorEdges, points);\n      treePath = treeInfo.solution;\n      maxDepth = treeInfo.maxDepth;\n      nodes = treeInfo.nodes\n      triangles = Object.values(treeInfo.triangles)\n    }\n\n    lastEdges = interiorEdges;\n    const t = transition().duration(transDuration);\n    const pointLine = line()\n      .x((d) => d.x)\n      .y((d) => d.y);\n\n    const positionLines = (lines) => {\n      lines\n        .attr(\"x1\", (d) => d.p1.x)\n        .attr(\"y1\", (d) => d.p1.y)\n        .attr(\"x2\", (d) => d.p2.x)\n        .attr(\"y2\", (d) => d.p2.y);\n    };\n\n    const initializeRadius = (circles) => {\n      circles.attr(\"r\", 0);\n    };\n\n    const growRadius = (enter, color) => {\n      enter.transition(t).attr(\"r\", pointSize).attr(\"fill\", color);\n    };\n\n    const positionCircles = (circles) => {\n      circles.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\n    };\n\n    const enterCircles = (circles, color) => {\n      circles\n        .call(positionCircles)\n        .call(initializeRadius)\n        .call(growRadius, color);\n    };\n\n    const positionText = (text) => {\n      text\n        .attr(\"x\", (_, i) => points[i].x - 3 + points[i].ux * 15)\n        .attr(\"y\", (_, i) => points[i].y + 6 + points[i].uy * 15);\n    };\n\n    const calculateDashArr = (edge) => {\n      let dashLength = dash\n        .split(/[\\s,]/)\n        .map((a) => parseFloat(a) || 0)\n        .reduce((a, b) => a + b);\n\n      let dashCount = Math.ceil(edge.dist / dashLength);\n      let newDashes = new Array(dashCount).join(dash + \" \");\n      let dashArray = newDashes + \" 0, \" + edge.dist;\n      return dashArray;\n    };\n\n    const exitLines = (lines) => {\n      lines\n        .attr(\"x1\", (_) => 0)\n        .attr(\"y1\", (_) => 0)\n        .attr(\"x2\", (_) => 0)\n        .attr(\"y2\", (_) => 0)\n    }\n\n    selection\n      .selectAll(\".vertex-label\")\n      .data(codeword)\n      .join(\n        (enter) => {\n          enter\n            .append(\"text\")\n            .attr(\"class\", \"vertex-label\")\n            .attr(\"opacity\", \"0.0\")\n            .attr(\"font-size\", fontSize)\n            .call(positionText)\n            .transition(t)\n\n            .attr(\"opacity\", \"1.0\")\n            .text((d) => d)\n             \n            // });\n        },\n\n        (update) =>\n          update.call((update) => update\n          // .attr(\"opacity\", \"0.0\")\n          .transition(t)\n          // .attr(\"font-size\", fontSize)\n          // .attr(\"opacity\", \"1.0\")\n          .text((d) => d)\n          .call(positionText)),\n        (exit) => exit\n          .transition(t)\n          .attr(\"opacity\", \"0.0\")\n          .remove()\n      )\n      // .attr(\"opacity\", \"0.0\")\n      // .transition(t)\n      // .attr(\"opacity\", \"1.0\")\n      // .text((d, i) => {\n      //   if (codeword[i] != null) {\n      //     return codeword[i].toString()\n      //   }            \n      // })\n\n    selection\n      .select(\"#poly-nodes\")\n      .selectAll(\".edge-node\")\n      .data(polygonEdges.map((e) => e.midpoint ).slice(0, -1))\n      .join(\n        (enter) =>\n          enter\n            .append(\"circle\")\n            .attr(\"class\", \"edge-node\")\n            .call(enterCircles, interp(7 / 11)),\n\n        (update) =>\n          update.call((update) => update.transition(t).call(positionCircles)),\n        (exit) => exit.transition(t).call(initializeRadius).remove()\n      );\n  \n    selection\n      .select(\"#poly-nodes\")\n      .selectAll(\".root\")\n      .data(polygonEdges.map((e) => e.midpoint ).slice(-1))\n      .join(\n        (enter) =>\n          enter\n            .append(\"circle\")\n            .attr(\"class\", \"root\")\n            .call(enterCircles, \"black\"),\n\n        (update) =>\n          update.call((update) => update.transition(t).call(positionCircles)),\n        (exit) => exit.transition(t).call(initializeRadius).remove()\n      );\n\n    selection\n      .select(\"#poly-nodes\")\n      .selectAll(\".vertex\")\n      .data(points)\n      .join(\n        (enter) =>\n          enter\n            .append(\"circle\")\n            .attr(\"class\", \"vertex\")\n            .call(enterCircles, pointColor),\n        (update) =>\n          update.call((update) => update.transition(t).call(positionCircles)),\n        (exit) => exit.transition(t).call(initializeRadius).remove()\n      );\n\n    selection\n      .select(\"#poly-links\")\n      .selectAll(\".polygon-lines\")\n      .data(polygonEdges)\n      .join(\n        (enter) =>\n          enter\n            .append(\"line\")\n            .attr(\"class\", \"polygon-lines\")\n            .attr(\"stroke-opacity\", \"0.0\")\n            .transition(t)\n            .on(\"start\", () => { listeners.call(\"animstart\", null);  })\n            .on(\"end\", () => {\n              listeners.call(\"animend\", null);\n            })\n            .attr(\"stroke-opacity\", \"1.0\")\n            .call(positionLines),\n        (update) =>\n          update.call((update) => update.transition(t).call(positionLines)),\n        (exit) =>\n          exit\n            .transition(t)\n            .on(\"start\", () => { listeners.call(\"animstart\", null) })\n            .on(\"end\", () => {\n              listeners.call(\"animend\", null);\n            })\n            .attr(\"stroke-opacity\", \"0.0\")\n            .call(exitLines)\n            .remove()\n      )\n      .attr(\"stroke\", color)\n      .attr(\"stroke-width\", strokeWidth);\n\n    selection\n      .select(\"#poly-interior-links\")\n      .selectAll(\".tree-path\")\n      .data(treePath)\n      .join(\n        (enter) => {\n          enter\n            .append(\"path\")\n            .attr(\"class\", \"tree-path\")\n            .attr(\"stroke-width\", strokeWidth)\n            .attr(\"d\", (d) => pointLine([d.p1, d.p2]))\n            .attr(\"stroke\", (d) => treeInterp(1 - (d.depth / 11))) // 11 is the max N\n            .attr(\"opacity\", \"0.0\")\n            .transition()\n            .delay(\n              (d, _) => interiorEdges.length * drawDelay + d.depth * drawDelay\n            )\n            // .on(\"end\", (event) => {\n            //   listeners.call(\"interioredgedraw\", null);\n            // })\n            .attr(\"stroke-dasharray\", (d) => calculateDashArr(d))\n            .attr(\"stroke-dashoffset\", (d) => d.dist)\n            .transition()\n\n            .attr(\"stroke-opacity\", \"1.0\")\n            .duration(1000)\n            .attr(\"opacity\", \"1\")\n            .attr(\"stroke-dashoffset\", 0)\n            .end()\n            .then(() => {\n              listeners.call(\"animend\", null);\n              // finishedAnimating = true\n            })\n            // .catch(() => {\n            //   listeners.call(\"animend\", null);\n            // })\n        },\n\n        (update) => {\n          update.call((update) => {\n            update\n              .attr(\"stroke-dasharray\", dash)\n              .attr(\"stroke-dashoffset\", null)\n              .transition(t)\n              .attr(\"stroke\", (d) => treeInterp(1-(d.depth / 11)))\n              .attr(\"d\", (d) => pointLine([d.p1, d.p2]));\n          });\n        },\n\n        (exit) => {\n          exit\n            .transition(t)\n            .attr(\"stroke-opacity\", \"0.0\")\n            .call(exitLines)\n            .remove();\n        }\n      );\n\n    selection\n      .select(\"#poly-links\")\n      .selectAll(\".interior\")\n      .data(interiorEdges)\n      .join(\n        (enter) => {\n          enter\n            .append(\"path\")\n            .attr(\"class\", \"interior\")\n            .attr(\"stroke-width\", strokeWidth)\n            .attr(\"d\", (d) => pointLine([d.p1, d.p2]))\n            .attr(\"stroke\", (d) => interp(d.start_idx / interiorEdges.length))\n            .attr(\"opacity\", \"0.0\")\n            .transition()\n            .on(\"start\", () => { listeners.call(\"animstart\", null) })\n            .delay((_, i) => i * drawDelay)\n            // .on(\"end\", (_) => {\n            //   console.log(\"draw edge\")\n              // listeners.call(\"end\", null);\n            // })\n            .attr(\"stroke-dasharray\", (d) => d.dist + \" \" + d.dist)\n            .attr(\"stroke-dashoffset\", (d) => d.dist)\n            .transition()\n            .attr(\"stroke-opacity\", \"1.0\")\n            .duration(1000)\n            .attr(\"opacity\", \"1\")\n            .attr(\"stroke-dashoffset\", 0);\n        },\n\n        (update) => {\n          update.call((update) => {\n            update\n              .attr(\"stroke-dasharray\", null)\n              .attr(\"stroke-dashoffset\", null)\n              .transition(t)\n              .attr(\"stroke\", (d) => interp(d.start_idx / interiorEdges.length))\n              .attr(\"d\", (d) => pointLine([d.p1, d.p2]));\n          });\n        },\n\n        (exit) => {\n          exit\n            .transition(t)\n            .attr(\"stroke-opacity\", \"0.0\")\n            .call(exitLines)\n            .remove();\n        }\n      );\n\n    // TODO\n    selection\n      .selectAll(\".interiorVertex\")\n      .data(\n        triangles.map((tri) => ({\n          x: tri.getCentroid().x,\n          y: tri.getCentroid().y,\n          start_idx: 0,\n        }))\n      )\n      .join(\n        (enter) =>\n          enter\n            .append(\"circle\")\n            .attr(\"class\", \"interiorVertex\")\n            .transition()\n            .delay((_, i) => i * drawDelay)\n            .call(positionCircles)\n            .call(initializeRadius)\n            .transition(t)\n            .attr(\"r\", pointSize)\n            .attr(\"fill\", (d) => interp(3 / 11)),\n        (update) =>\n          update.call((update) =>\n            update\n              .transition(t)\n              .call(positionCircles)\n              .attr(\"fill\", (d) => interp(3/ 11))\n          ),\n        (exit) => exit.transition(t).call(initializeRadius).remove()\n      );\n    // selection\n    //   .selectAll(\".interiorVertex\")\n    //   .data(\n    //     interiorEdges.map((e) => ({\n    //       x: e.midpoint.x,\n    //       y: e.midpoint.y,\n    //       start_idx: e.start_idx,\n    //     }))\n    //   )\n    //   .join(\n    //     (enter) =>\n    //       enter\n    //         .append(\"circle\")\n    //         .attr(\"class\", \"interiorVertex\")\n    //         .transition()\n    //         .delay((_, i) => i * drawDelay)\n    //         .call(positionCircles)\n    //         .call(initializeRadius)\n    //         .transition(t)\n    //         .attr(\"r\", pointSize)\n    //         .attr(\"fill\", (d) => interp(d.start_idx / interiorEdges.length)),\n    //     (update) =>\n    //       update.call((update) =>\n    //         update\n    //           .transition(t)\n    //           .call(positionCircles)\n    //           .attr(\"fill\", (d) => interp(d.start_idx / interiorEdges.length))\n    //       ),\n    //     (exit) => exit.transition(t).call(initializeRadius).remove()\n    //   );\n  };\n\n  my.codeword = function (_) {\n    return arguments.length ? ((codeword = _), my) : codeword;\n  };\n\n  my.color = function (_) {\n    return arguments.length ? ((color = _), my) : color;\n  };\n\n  my.radius = function (_) {\n    return arguments.length ? ((radius = _), my) : radius;\n  };\n\n  my.pointSize = function (_) {\n    return arguments.length ? ((pointSize = _), my) : pointSize;\n  };\n\n  my.pointColor = function (_) {\n    return arguments.length ? ((pointColor = _), my) : pointColor;\n  };\n\n  my.N = function (_) {\n    return arguments.length ? ((N = _), my) : N;\n  };\n\n  my.reset = function () {\n    lastEdges = null;\n    codeword = [];\n    return my;\n  };\n\n  my.margin = function (_) {\n    return arguments.length ? ((margin = _), my) : margin;\n  };\n\n  my.strokeWidth = function (_) {\n    return arguments.length ? ((strokeWidth = _), my) : strokeWidth;\n  };\n\n  my.dash = function (_) {\n    return arguments.length ? ((dash = _), my) : dash;\n  };\n\n  my.fontSize = function (_) {\n    return arguments.length ? ((fontSize = _), my) : fontSize;\n  };\n\n  my.interp = function (_) {\n    return arguments.length ? ((interp = _), my) : interp;\n  };\n\n  my.treeInterp = function (_) {\n    return arguments.length ? ((treeInterp = _), my) : treeInterp;\n  };\n\n  my.drawDelay = function (_) {\n    return arguments.length ? ((drawDelay = _), my) : drawDelay;\n  };\n\n  my.transDuration = function (_) {\n    return arguments.length ? ((transDuration = _), my) : transDuration;\n  };\n\n  my.on = function () {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? my : value;\n  };\n\n  my.nodes = function() {\n    if (nodes) {\n      return nodes\n    } else {\n      return []\n    }\n  }\n\n  my.treePath = function() {\n    return treePath\n  }\n\n\n  return my;\n};\n","// Credits to Curran Kelleher!\n// https://vizhub.com/forum/t/episode-11-charts-with-menus/216\n\nimport { dispatch } from 'd3';\nexport const menu = () => {\n  let id;\n  let labelText;\n  let options;\n  const listeners = dispatch('change', 'focus');\n  const my = (selection) => {\n    selection\n      .selectAll('label')\n      .data([null])\n      .join('label')\n      .attr('for', id)\n      .text(labelText);\n\n    selection\n      .selectAll('select')\n      .data([null])\n      .join('select')\n      .attr('id', id)\n      .on('change', (event) => {\n        listeners.call('change', null, event.target.value);\n      })\n      .on('focus', (event) => {\n        listeners.call('focus', null);\n      })\n      .selectAll('option')\n      .data(options)\n      .join('option')\n      .attr('value', (d) => d.value)\n      .text((d) => d.text);\n  };\n\n  my.id = function (_) {\n    return arguments.length ? ((id = _), my) : id;\n  };\n\n  my.labelText = function (_) {\n    return arguments.length\n      ? ((labelText = _), my)\n      : labelText;\n  };\n\n  my.options = function (_) {\n    return arguments.length ? ((options = _), my) : options;\n  };\n\n  my.on = function () {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? my : value;\n  };\n\n  return my;\n};\n","import { dispatch } from \"d3\";\nexport const input = () => {\n  let id;\n  let placeholder;\n  const listeners = dispatch(\"confirm\", \"focusout\");\n\n  const my = (selection) => {\n    selection\n      .selectAll(\"input\")\n      .data([null])\n      .join(\"input\")\n      .attr(\"placeholder\", placeholder)\n      .attr(\"id\", id)\n      .on(\"focusout\", (e) => {\n        listeners.call(\"focusout\", null, e.target.value);\n      })\n      .on(\"keyup\", (e) => {\n        if (e.key == \"Enter\") {\n          listeners.call(\"confirm\", null, e.target.value);\n        }\n      });\n  };\n\n  my.id = function (_) {\n    return arguments.length ? ((id = _), my) : id;\n  };\n\n  my.placeholder = function (_) {\n    return arguments.length ? ((placeholder = _), my) : placeholder;\n  };\n\n  my.on = function () {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? my : value;\n  };\n\n  return my;\n};\n","import { dispatch } from 'd3';\nexport const button = () => {\n  let id;\n  let labelText;\n  const listeners = dispatch('click');\n  \n  const my = (selection) => {\n    selection\n      .selectAll('button')\n      .data([null])\n      .join('button')\n      .attr('id', id)\n      .text(labelText)\n      .on('click', () => {\n        listeners.call('click', null);\n      })\n  };\n\n  my.id = function (_) {\n    return arguments.length ? ((id = _), my) : id;\n  };\n\n  my.labelText = function (_) {\n    return arguments.length\n      ? ((labelText = _), my)\n      : labelText;\n  };\n\n  my.on = function () {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? my : value;\n  };\n\n  return my;\n};\n","import { dispatch, transition, cluster } from 'd3';\n\nexport const tree = () => {\n  let width;\n  let height;\n  let margin; \n  let nodes; // Dictionary of nodes \n  let N;\n  let transDuration;\n  let treeInterp;\n  let interp;\n  let points;\n  let maxXTransform;\n  let nodeSize;\n  \n  const my = (selection) => {\n    const t = transition().duration(transDuration);\n    const tree = d3.cluster()\n    .nodeSize([11, 14])\n    // .size([width, height])\n    // .nodeSize([20, 20])\n    // .separation((a, b) => {\n    //   return (a.parent == b.parent ? 1 : 10)\n    // })\n\n    const initializeRadius = (circles) => {\n      circles.attr(\"r\", 0);\n    };\n\n    // const growRadius = (enter, color) => {\n    //   enter.transition(t).attr(\"r\", nodeSize).attr(\"fill\", color);\n    // };\n\n    const positionCircles = (circles) => {\n      circles.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\n    };\n\n    const rootKey = `${N - 1},0`\n\n    let links = []\n    let n = []\n    if (nodes && rootKey in nodes) {\n      const root = d3.hierarchy(nodes[rootKey], (d) => {\n        d.children = []\n        if (d.left) {\n          d.children.push(nodes[d.left]) \n        }\n        if (d.right) {\n          d.children.push(nodes[d.right])\n        }\n        return d.children\n      })\n\n      const treeData = tree(root)\n      // treeData.y = treeData.y + 20\n\n      n = treeData.descendants()\n\n      for (let i = 0; i < n.length; i++) {\n        n[i].x = n[i].x + 17 * N\n        n[i].y = n[i].y + 80\n      }\n\n  \n      n[0].y = n[0].y - (N * 5)\n      links = treeData.descendants().slice(1) \n    }\n\n    selection\n      .selectAll('line.link')\n      .data(links)\n      .join(\n        (enter) => {\n          enter\n            .append('line')\n            .attr('class', 'link')\n            .attr('data-value', (d) => d.data.value )\n            .attr('stroke-width', 2)\n            .attr('x1', 0)\n            .attr('y1', 0)\n            .attr('x2', 0)\n            .attr('y2', 0)\n            .transition(t)\n            .attr('x1', d => d.parent.x)\n            .attr('y1', d => d.parent.y)\n            .attr('x2', d => d.x)\n            .attr('y2', d => d.y)\n            .attr(\"stroke\", (d) => treeInterp(1- (d.depth / 11)))\n        },\n        (update) => {\n          update\n            .transition(t)\n              .attr('x1', d => d.parent.x)\n              .attr('y1', d => d.parent.y)\n              .attr('x2', d => d.x)\n              .attr('y2', d => d.y)\n              .attr(\"stroke\", (d) => treeInterp(1- (d.depth / 11)))\n        }, \n        (exit) => {\n          exit\n            .transition(t)\n            .attr(\"stroke-width\", \"0.0\")\n            .remove();\n        },\n      )  \n      selection\n      .selectAll(\".real-tree-node\")\n      .data(n)\n      .join(\n        (enter) =>\n          enter\n            .append(\"circle\")\n            .attr('data-value', d => { return d.data.value })\n            .attr(\"class\", \"real-tree-node\")\n            .attr(\"opacity\", \"0.0\")\n            .attr(\"fill\", (d) => { \n\n              return d.data.leaf ? interp(7 / 11) : interp(3 / 11)\n            })\n            .call(initializeRadius)\n            .transition(t)\n            .call(positionCircles)\n            .attr(\"r\", nodeSize)\n            .attr(\"opacity\", \"1.0\"),\n        (update) =>\n          update.call((update) =>\n            update\n              .transition(t)\n              .call(positionCircles)\n              .attr(\"fill\", (d) => d.data.leaf ? interp(7 / 11) : interp(3 / 11))\n          ),\n        (exit) => exit.transition(t).call(initializeRadius).remove()\n      )    \n  };\n\n  my.width = function (_) {\n    return arguments.length ? ((width = _), my) : width;\n  };\n\n  my.height = function (_) {\n    return arguments.length ? ((height = _), my) : height;\n  };\n\n  my.margin = function (_) {\n    return arguments.length ? ((margin = _), my) : margin;\n  };\n\n  my.nodes = function (_) {\n    return arguments.length ? ((nodes = _), my) : nodes;\n  };\n\n  my.N = function (_) {\n    return arguments.length ? ((N = _), my) : N;\n  };\n\n  my.transDuration = function (_) {\n    return arguments.length ? ((transDuration = _), my) : transDuration;\n  };\n  \n  my.interp = function (_) {\n    return arguments.length ? ((interp = _), my) : interp;\n  };\n\n  my.treeInterp = function (_) {\n    return arguments.length ? ((treeInterp = _), my) : treeInterp;\n  };\n\n  my.points = function (_) {\n    return arguments.length ? ((points = _), my) : points;\n  };\n\n  my.reset = function () {\n    nodes = {}\n    points = []\n    N = null\n    return my;\n  };\n\n  my.update = function(poly) {\n    nodes = poly.nodes()\n    points = poly.treePath()\n    N = poly.N()\n    return my\n  }\n\n  my.maxXTransform = function (_) {\n    return arguments.length ? ((maxXTransform = _), my) : maxXTransform;\n  };\n\n  my.nodeSize = function (_) {\n    return arguments.length ? ((nodeSize = _), my) : nodeSize;\n  };\n\n  return my;\n};\n","const MAP_HEIGHT = 2;\n\n/**\n * Sum up all of the elements of the array starting\n * at index i\n * @param {list} arr Array\n * @param {int} idx Start index\n */\nfunction arrsum(arr, idx) {\n    let res = 0;\n    for (let i = idx; i < arr.length; i++) {\n        res += arr[i];\n    }\n    return res;\n}\n\n/**\n * Make a comma separated string out of an array\n * \n * @param {list} arr Array\n * @param {str} sep Separator\n */\nfunction arrstr(arr, sep) {\n    let s = \"\";\n    if (sep == undefined) {\n        sep = \"\"\n    }\n    for (let i = 0; i < arr.length; i++) {\n        s += arr[i];\n        if (i < arr.length-1) {\n            s += sep;\n        }\n    }\n    return s;\n}\n\n/**\n * Search for an array in an array of arrays\n * @param {array of arrays} arr Array of arrays\n * @param {array} inarr Array we're searching for\n */\nfunction arrInArr(arr, inarr) {\n    let found = false;\n    for (let i = 0; i < arr.length; i++) {\n        let equals = (arr[i].length == inarr.length);\n        if (equals) {\n            for (let k = 0; k < arr[i].length; k++) {\n                equals = equals && (arr[i][k] == inarr[k]);\n            }\n            found = found || equals;\n        }\n    }\n    return found;\n}\n\nclass Codeword {\n    constructor(w) {\n        this.w = new Int32Array(w);\n    }\n\n    /**\n     * Extract the internal edges from the codeword\n     * @param {int} min_idx Minimum index at which to start\n     * throwing down edges\n     * @returns \n     */\n    get_edges(min_idx) {\n        if (min_idx === undefined) {\n            min_idx = 0;\n        }\n        const w = this.w;\n        const N = w.length;\n        const visible = new Int32Array(N+2);\n        for (let k = 0; k < N+2; k++) {\n            visible[k] = 1;\n        }\n        let i = N-1;\n        let edges = [];\n        while (i >= min_idx) {\n            let wi = w[i];\n            let j = i+2;\n            while (wi > 0) {\n                // Find closest visible vertex\n                while (j < N+2 && visible[j] == 0) {\n                    j += 1;\n                }\n                edges.push([i, j]);\n                for (let k = i+1; k < j; k++) {\n                    visible[k] = 0;\n                }\n                wi -= 1;\n                j += 1;\n            }\n            i -= 1;\n        }\n        return edges;\n    }\n\n    /**\n     * @param {svg Element} g SVG element on which to draw this\n     * @param {float} d Diameter of circle in which the polygon is inscribed\n     * @param {list of [float, float]} c  Center of circle in which the polygon is inscribed\n     * @param {object} options \n     *  {\n            show_codeword: bool\n                If True, show codeword values at vertices (default True)\n            min_idx: int\n                Minimum index from which to draw edges or numbers\n            bold_idxs: set\n                Bold the indices in this set (useful for stacks)\n            bold_color\n                Color to draw bolded items\n            color:\n                Color to draw polygon (default 'k')\n            circled_vertices: list of int\n                Indices of vertices to circle\n            dotted_edges: list of [int, int]\n                Edges to draw dotted (not necessarily in the triangulation)\n            dotted_color: \n                Color to draw dotted edges if they exist\n            draw_index: bool\n                If True, draw indices instead of values\n            stroke_width: float\n                With of edges\n        }\n     */\n    draw(g, d, c, options) {\n        if (options == undefined) {\n            options = {};\n        }\n        if (!(\"show_codeword\" in options)) {\n            options[\"show_codeword\"] = true;\n        }\n        if (!(\"min_idx\" in options)) {\n            options[\"min_idx\"] = 0;\n        }\n        if (!(\"bold_idxs\" in options)) {\n            options[\"bold_idxs\"] = [];\n        }\n        if (!(\"bold_color\" in options)) {\n            options[\"bold_color\"] = d3.rgb(255, 128, 12);\n        }\n        if (!(\"color\" in options)) {\n            options[\"color\"] = d3.rgb(0, 0, 0);\n        }\n        if (!(\"circled_vertices\" in options)) {\n            options[\"circled_vertices\"] = [];\n        }\n        if (!(\"dotted_edges\" in options)) {\n            options[\"dotted_edges\"] = [];\n        }\n        if (!(\"dotted_color\" in options)) {\n            options[\"dotted_color\"] = d3.rgb(0, 0, 0);\n        }\n        if (!(\"draw_index\" in options)) {\n            options[\"draw_index\"] = false;\n        }\n        if (!(\"stroke_width\" in options)) {\n            options[\"stroke_width\"] = 2.5;\n        }\n        const stroke_width = options[\"stroke_width\"];\n        \n        // Step 1: Draw polygon boundary\n        const min_idx = options[\"min_idx\"];\n        const r = d/2;\n        const w = this.w;\n        const N = w.length;\n        const dTheta = (2*Math.PI/(N+2));\n        let theta = Math.PI/2 + Math.PI/(N+2);\n        let Xx = [];\n        let Tx = [];\n        let Xy = [];\n        let Ty = [];\n        for (let i = 0; i < N+3; i++) {\n            const x = r*Math.cos(theta) + c[0];\n            const y = -r*Math.sin(theta) + c[1];\n            Xx.push(x);\n            Xy.push(y);\n            Tx.push(r*1.25*Math.cos(theta) + c[0]);\n            Ty.push(-r*1.25*Math.sin(theta) + c[1]);\n            if (options[\"circled_vertices\"].includes(i)) {\n                g.append(\"circle\")\n                .attr(\"r\", 10)\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", \"red\")\n                .attr(\"stroke-width\", 1.5)\n                .attr(\"cx\", Tx[i]).attr(\"cy\", Ty[i]);\n            }\n\t\t\tg.append(\"circle\")\n\t\t\t\t.attr(\"r\", 5)\n\t\t\t\t.attr(\"fill\", options[\"color\"])\n\t\t\t\t.attr(\"cx\", x).attr(\"cy\", y);\n            theta += dTheta;\n        }\n        let rg = N;\n        if (options[\"draw_index\"]) {\n            rg = N+2;\n        }\n        if (options[\"show_codeword\"]) {\n            for (let i = 0; i < rg; i++) {\n                if (i >= min_idx) {\n                    let c = options[\"color\"];\n                    let font_weight = 100;\n                    if (options[\"bold_idxs\"].includes(i)) {\n                        c = options[\"bold_color\"];\n                        font_weight = 700;\n                    }\n                    let val = i;\n                    if (!options[\"draw_index\"]) {\n                        val = w[i];\n                    }  \n                    g.append(\"text\")\n                        .attr(\"x\", Tx[i])\n                        .attr(\"y\", Ty[i])\n                        .attr(\"text-anchor\", \"middle\")\n                        .attr(\"dy\", 5)\n                        .attr(\"fill\", c)\n                        .style(\"font-weight\", font_weight)\n                        .text(\"\"+val);\n                }\n            }\n        }\n\n        // Step 2: Draw polygon edges\n        // Step 2a: Boundary edges\n        for (let i = 0; i < N+2; i++) {\n            g.append(\"line\")\n            .attr(\"x1\", Xx[i])\n            .attr(\"y1\", Xy[i])\n            .attr(\"x2\", Xx[i+1])\n            .attr(\"y2\", Xy[i+1])\n            .attr(\"stroke\", options[\"color\"])\n            .attr(\"stroke-width\", stroke_width);\n        }\n        // Step 2b: Internal edges\n        const edges = this.get_edges(min_idx);\n        for (let k = 0; k < edges.length; k++) {\n            let e = edges[k];\n            const i = e[0];\n            const j = e[1];\n            g.append(\"line\")\n            .attr(\"x1\", Xx[i])\n            .attr(\"y1\", Xy[i])\n            .attr(\"x2\", Xx[j])\n            .attr(\"y2\", Xy[j])\n            .attr(\"stroke\", options[\"color\"])\n            .attr(\"stroke-width\", stroke_width);\n        }\n\n        // Step 3: Draw any dotted edges\n        for (let idx = 0; idx < options[\"dotted_edges\"].length; idx++) {\n            const e = options[\"dotted_edges\"][idx];\n            const i = e[0];\n            const j = e[1];\n            g.append(\"line\")\n            .attr(\"x1\", Xx[i])\n            .attr(\"y1\", Xy[i])\n            .attr(\"x2\", Xx[j])\n            .attr(\"y2\", Xy[j])\n            .attr(\"stroke\", options[\"dotted_color\"])\n            .attr(\"stroke-width\", stroke_width)\n            .style(\"stroke-dasharray\", \"10, 5\");\n        }\n\n    }\n}\n\n\nexport class Associahedron {\n    /**\n     * \n     * @param {int} n \n     * @param {object} opts \n        {\n            \"diameter\": How big each polygon is,\n            \"g_x_offset\": Global x offset\n            \"g_y_offset\": Global y offset\n            \"show_circle\": Whether to show the dotted circle around where we are\n            \"show_map\": Whether to show the reversal map\n        }\n     * @param {string} domStr ID of the DOM element to fill with this\n     */\n    constructor(n, opts, domStr) {\n        if (opts == undefined) {\n            opts = {};\n        }\n        if (!(\"diameter\" in opts)) {\n            opts[\"diameter\"] = 100;\n        }\n        if (!(\"g_x_offset\" in opts)) {\n            opts[\"g_x_offset\"] = opts[\"diameter\"]*n*1.5;\n        }\n        if (!(\"g_y_offset\" in opts)) {\n            opts[\"g_y_offset\"] = 40;\n        }\n        if (!(\"show_circle\" in opts)) {\n            opts[\"show_circle\"] = false;\n        }\n        if (!(\"show_map\" in opts)) {\n            opts[\"show_map\"] = false;\n        }\n        this.n = n;\n        const diam = opts[\"diameter\"];\n        this.diam = diam;\n        this.g_x_offset = opts[\"g_x_offset\"];\n        this.g_y_offset = opts[\"g_y_offset\"];\n\n        // Step 1: Setup container and canvas\n\t\tconst container = document.getElementById(domStr);\n\t\tcontainer.addEventListener(\"contextmenu\", e => e.preventDefault());\n\t\tthis.width = window.innerWidth * 0.9;\n\t\tthis.height = window.innerHeight * 0.9;\n\t\tthis.container = container;\n\n        this.text = document.createElement(\"h4\");\n        this.container.appendChild(this.text);\n\n        let canvasDOM = document.createElement(\"div\");\n        canvasDOM.id = domStr + \"_Canvas\";\n        container.appendChild(canvasDOM);\n\t\tthis.canvas = d3.select(\"#\"+domStr+\"_Canvas\")\n\t\t.append(\"svg\")\n\t\t.attr(\"width\", this.width)\n\t\t.attr(\"height\", this.height)\n\t\t.call(d3.drag().on(\"drag\", this.dragNode.bind(this)))\n\t\t// .attr(\"style\", \"border-style: dotted;\");\n\t\tthis.container.obj = this;\n\t\t// Clear all graph elements if any exist\n\t\tthis.canvas.selectAll(\"*\").remove();\n\n\t\tthis.g = this.canvas.append(\"g\");\n\t\tthis.xoffset = 0;\n\t\tthis.yoffset = 0;\n\n        if (opts[\"show_circle\"]) {\n            const cg = this.canvas.append(\"g\");\n            cg.append(\"circle\")\n            .attr(\"r\", 0.9*diam)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 3)\n            .style(\"stroke-dasharray\", \"10, 5\")\n            .attr(\"cx\", opts[\"g_x_offset\"]-1.5*diam*(n-2))\n            .attr(\"cy\", opts[\"g_y_offset\"]+diam*0.6);\n        }\n        this.show_map = false;\n        if (opts[\"show_map\"]) {\n            this.mg = this.canvas.append(\"g\");\n            this.show_map = true;\n        }\n\n        this.w = new Int32Array(n);\n        this.stack_index = new Int32Array(n);\n        this.codewords = [];\n        this.last_codeword = null;\n        this.codeword_obj = {};\n        this.make_stack_rec(this.w, n-1, this.g_x_offset, this.g_y_offset, opts, this.g);\n        if (this.show_map) {\n            this.initializeMap();\n        }\n        this.resetAnimation();\n    }\n\n    resetAnimation() {\n        this.animIndex = 0;\n    }\n\n    finishedAnimation() {\n        return this.animIndex >= this.codewords.length-1;\n    }\n\n    /**\n     * \n     * @param {float} moveTime Animation timestep, in milliseconds\n     * @returns \n     */\n    async moveToNext(moveTime) {\n        if (this.finishedAnimation()) {\n            return;\n        }\n        const c1 = this.codewords[this.animIndex];\n        const s1 = c1.s;\n        this.animIndex += 1;\n        const c2 = this.codewords[this.animIndex];\n        const s2 = c2.s;\n\n        // First check if we're jumping to a new stack\n        let newStack = false;\n        let i = s1.length-1;\n        while (i >= 0 && !newStack) {\n            if (s1[i] != s2[i]) {\n                newStack = true;\n            }\n            else {\n                i--;\n            }\n        }\n        let x = 0;\n        const y = -c2.y+0.065*this.diam*this.n;\n        let message = \"\"\n        if (newStack) {\n            message = \"Jumping to a new stack of dimension\"\n\n            // this.text.innerHTML = \"Moving to new stack of dimension \" + i;\n            // message += \" where w[\"+(i+1)+\"] = \" + c2.c.w[i+1];\n            // if (s2[i]%2 == 0) {\n            //     message += \" and where w[\"+i+\"] goes down in reverse from \" + c2.c.w[i];\n            // }\n            \n            // else {\n            //     message += \" and where w[\"+i+\"] goes up from \" + c2.c.w[i];\n            // }\n\n            x = -this.diam*i*1.5;\n            this.g.transition().duration(moveTime*2)\n            .attr(\"transform\", \"translate(\"+x+\",\"+y+\")\");\n            await new Promise(resolve => {setTimeout(() => resolve(), moveTime*2)});\n            x = 0;\n        }\n        if (message != \"\")  {\n            d3.select(\"#reverse-text\").text(message)\n            d3.select(\"#dim-stack\").text(i)\n            setTimeout(() => { d3.select(\"#reverse-text\").text(\" \")}, 5000)\n            setTimeout(() => { d3.select(\"#dim-stack\").text(\" \")}, 5000)\n        }\n        // this.text.innerHTML = arrstr(c2.c.w);\n        this.xoffset = x;\n        this.yoffset = y;\n        this.updateMap();\n        \n        this.g.transition().duration(moveTime)\n            .attr(\"transform\", \"translate(0,\"+y+\")\");\n        await new Promise(resolve => {setTimeout(() => resolve(), moveTime)});\n    }\n\n    /**\n     * @param {string} codeword The codeword to animate to\n     * @param {float} moveTime Animation timestep, in milliseconds  \n     */\n    async animateToCodeword(codeword, moveTime) {\n        let position = this.codeword_obj[codeword]\n        const y = -position.y+0.065*this.diam*this.n;\n        this.xoffset = 0;\n        this.yoffset = position.y;\n        this.updateMap();\n        this.g.transition().duration(moveTime)\n            .attr(\"transform\", \"translate(0,\"+y+\")\");\n        await new Promise(resolve => {setTimeout(() => resolve(), moveTime)});\n    }\n\n    updateMap() {\n        if (this.show_map) {\n            let y = this.height/2 + this.yoffset*MAP_HEIGHT/(1.5*this.diam);\n            this.mg.attr(\"transform\", \"translate(0,\"+y+\")\");\n        }\n    }\n\n    dragNode() {\n\t\tthis.xoffset += d3.event.dx;\n\t\tthis.yoffset += d3.event.dy;\n\t\tthis.g.attr(\"transform\", \"translate(\"+this.xoffset+\" \"+this.yoffset+\")\");\n        this.updateMap();\n\t}\n\n\t/**\n\t * React to a mouse down event by adding a node\n\t */\n\tmouseDown() {\n\t\tlet point = d3.mouse(d3.event.currentTarget);\n\t}\n\n\t/**\n\t * A function which toggles all of the visible elements to show\n\t */\n\tshow() {\n\t\tthis.container.style(\"display\", \"block\");\n\t}\n\n\t/**\n\t * A function which toggles all of the visible elements to hide\n\t */\n\thide() {\n\t\tthis.container.style(\"display\", \"none\");\n\t}\n\n    initializeMap() {\n        const that = this;\n        const g = this.mg;\n        const width = this.diam/this.n;\n        const height = MAP_HEIGHT;\n        let y = 0;\n        for (let i = 0; i < this.codewords.length; i++) {\n            const s = this.codewords[i].s;\n            for (let j = 1; j < s.length; j++) {\n                let x = this.width - this.diam + j*width;\n                let r = g.append(\"rect\")\n                .attr(\"i\", i)\n                .attr(\"j\", j)\n                .attr(\"x\", x)\n                .attr(\"y\", y)\n                .attr(\"width\", width)\n                .attr(\"height\", height)\n                .attr(\"stroke\", \"none\")\n                if (s[j]%2 == 0) {\n                    r = r.attr(\"fill\", \"gray\")\n                }\n                else {\n                    r = r.attr(\"fill\", \"white\")\n                }\n                r.on(\"mousedown\", function() {\n                    let xoffset = -(j-1)*1.5*that.diam;\n                    let yoffset = -i*that.diam*1.5;\n                    that.g.attr(\"transform\", \"translate(\"+xoffset+\" \"+yoffset+\")\");\n                    that.xoffset = xoffset;\n                    that.yoffset = yoffset;\n                    that.updateMap();\n                });\n            }\n            y += height;\n        }\n        g.append(\"rect\")\n        .attr(\"x\", this.width-this.diam+width)\n        .attr(\"y\", 0)\n        .attr(\"width\", this.diam*(this.n-2)/this.n)\n        .attr(\"height\", MAP_HEIGHT*this.codewords.length)\n        .attr(\"stroke\", \"black\")\n        .attr(\"fill\", \"none\")\n        \n        const lg = this.canvas.append(\"g\");\n        lg.append(\"line\")\n        .attr(\"x1\", this.width-this.diam+width)\n        .attr(\"y1\", this.height/2)\n        .attr(\"x2\", this.width-this.diam+width+this.diam*(this.n-2)/this.n)\n        .attr(\"y2\", this.height/2)\n        .attr(\"stroke\", d3.rgb(255, 128, 12))\n        .attr(\"stroke-width\", 2)\n        .style(\"stroke-dasharray\", \"10, 5\");\n\n        this.updateMap();\n    }\n\n    make_stack_rec(w, d, g_x_offset, y_offset, opts, g) {\n        const n = w.length;\n        const diam = opts[\"diameter\"];\n        let dy = -0.1*diam;\n        let h = w.length-d-arrsum(w, d+1)+1;\n        let x_offset = g_x_offset - 1.5*diam*(n-d-1);\n        g.append(\"text\")\n        .attr(\"x\", x_offset)\n        .attr(\"y\", y_offset)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"d = \" + d + \", h = \" + h, dy=0.7*diam);\n        let y1 = y_offset-diam/7;\n        let n_items = 0;\n        let vals = [];\n        if (this.stack_index[d]%2 == 0) {\n            vals = (new Int32Array(h)).map((_, idx) => idx);\n        }\n        else {\n            vals = (new Int32Array(h)).map((_, idx) => h-idx-1);            \n        }\n        this.stack_index[d] += 1;\n        const stackorder = new Int32Array(this.stack_index);\n        for (let ival = 0; ival < vals.length; ival++) {\n            let val = vals[ival];\n            let wi = new Int32Array(w);\n            wi[d] = val;\n            let ni = 0;\n            if (d == 1) {\n                // Base case\n                wi[0] = n-1-arrsum(wi, 1);\n                ni = 1;\n                let c = new Codeword(wi);\n                this.codewords.push({\n                    \"c\":c, \n                    \"s\":stackorder,\n                    \"x\":x_offset,\n                    \"y\":y_offset\n                });\n                this.codeword_obj[arrstr(wi, \",\")] = this.codewords[this.codewords.length-1];\n                \n                let dotted_edges = [];\n                let circled_vertices = [];\n                if (this.codewords.length > 1) {\n                    // Indicate quad where flip happened\n                    let e1 = c.get_edges();\n                    let c2 = this.last_codeword;\n                    let e2 = c2.get_edges();\n                    for (let k = 0; k < e2.length; k++) {\n                        if (!arrInArr(e1, e2[k])) {\n                            dotted_edges.push(e2[k]);\n                        }\n                    }\n                    for (let k = 0; k < w.length; k++) {\n                        if (c.w[k] != c2.w[k]) {\n                            circled_vertices.push(k);\n                        }\n                    }\n                }\n                c.draw(g, diam, [x_offset, y_offset+dy], {\n                    \"bold_idxs\":[1],\n                    \"circled_vertices\":circled_vertices,\n                    \"dotted_edges\":dotted_edges\n                });\n                let t = g.append(\"text\")\n                .attr(\"x\", x_offset-diam-n*diam*0.07)\n                .attr(\"y\", y_offset+dy)\n                .attr(\"text-anchor\", \"middle\");\n                for (let k = 0; k < wi.length; k++) {\n                    t = t.append(\"tspan\");\n                    if (circled_vertices.includes(k)) {\n                        t = t.style(\"font-weight\", \"700\");\n                    }\n                    else {\n                        t = t.style(\"font-weight\", \"100\");\n                    }\n                    t = t.text(\"\"+wi[k]);\n                }\n                this.last_codeword = c;\n            }\n            else {\n                let c = new Codeword(wi);\n                c.draw(g, diam, [x_offset, y_offset+dy], {\n                    \"min_idx\":d,\n                    \"bold_idxs\":[d]\n                });\n                let s = \"\";\n                for (let k = d; k < wi.length; k++) {\n                    s += wi[k];\n                }\n                g.append(\"text\")\n                .attr(\"x\", x_offset)\n                .attr(\"y\", y_offset-diam/3.2+dy)\n                .attr(\"text-anchor\", \"middle\")\n                .text(s);\n                ni = this.make_stack_rec(wi, d-1, g_x_offset, y_offset, opts, g);\n            }\n            n_items += ni;\n            y_offset += diam*1.5*ni\n        }\n        let y2 = y_offset - diam/7;\n        let x1 = x_offset - 1.5*diam/2;\n        let x2 = x1 + 1.5*diam;\n\n        let r = g.append(\"rect\")\n        .attr(\"x\", x1)\n        .attr(\"y\", y1)\n        .attr(\"width\", x2-x1)\n        .attr(\"height\", y2-y1)\n        .attr(\"stroke\", \"black\")\n        if (this.stack_index[d]%2 == 0) {\n            r.attr(\"fill-opacity\",\"0.3\")\n            .attr(\"fill\", \"gray\")\n        }\n        else {\n            r.attr(\"fill\", \"none\");\n        }\n        return n_items;\n    }\n\n}","import { select } from \"d3\";\nimport { getCodeWords, isValidCodeword } from \"./codeword\";\nimport { polygon } from \"./polygon\";\nimport { menu } from \"./menu\";\nimport { input } from \"./input\";\nimport { button } from \"./button\";\nimport { tree } from \"./tree\";\nimport { Associahedron } from \"../codewords\"\n\n\n// https://gist.github.com/mbostock/1125997\n// https://observablehq.com/@mbostock/scrubber\n// https://stackoverflow.com/questions/23048263/pausing-and-resuming-a-transition\n// http://www.ams.org/publicoutreach/feature-column/fcarc-associahedra\n\nconst margin = {\n  top: 20,\n  right: 30,\n  bottom: 7,\n  left: 20,\n};\n\nconst treeMargin = {\n  top: 20,\n  right: 20,\n  bottom: 20,\n  left: 20,\n};\n\nconst treeWidth = 600;\nconst treeHeight = 250;\n\nconst N = 2;\nlet codewords = getCodeWords(N);\n\nconst mapCodewords = (cws) =>\n  cws.map((code) => ({\n    value: code,\n    text: code,\n  }));\n\nconst createCodewordOptions = (cws) => {\n  const noneOption = [\n    {\n      value: \"none\",\n      text: \"None\",\n    },\n  ];\n  const options = noneOption.concat(mapCodewords(cws));\n  return options;\n};\n\nlet codeword = [];\n\nconst width = window.innerWidth - margin.left - margin.right;\nconst height = window.innerHeight - margin.top - margin.bottom;\n\nconst codewordHeader = select(\"#codeword-text\")\n\nconst exploreLink = select(\"#stack-explore-link\").text(\"Click to explore stack for n=2\").attr(\"href\", \"scrollStack.html?n=2\");\n\n\nconst menuContainer = select(\".menu-container\")\n\nconst polySvg = select(\"#polygon\")\n  .attr(\"width\", 250)\n  .attr(\"height\", height - 450);\n\nconst treeSvg = select(\"#tree\")\n  .attr(\"width\", 300)\n  .attr(\"height\", height - 450);\n\nconst NInputLabel = menuContainer.append(\"label\").text(\"Type N and press Enter: \");\nconst NInput = menuContainer.append(\"div\");\nconst codewordMenu = menuContainer.append(\"div\");\n\nconst codewordLabel = menuContainer.append(\"label\").text(\"Type codeword and press Enter: \");\nconst inputButton = menuContainer.append(\"div\");\n\nmenuContainer.append(\"br\")\nconst startAnimationButton = menuContainer.append(\"div\").attr(\"id\", \"anim-buttons\").append(\"span\");\n\nconst restartDrawButton = menuContainer.select(\"#anim-buttons\").append(\"span\");\n\n// menuContainer.append(\"hr\").attr(\"color\", \"#DCDCDC\")\nconst radius = 100;\nconst pointSize = 4;\n\nconst color = \"black\";\nconst pointColor = \"black\";\nconst interp = d3[\"interpolateViridis\"];\nconst treeInterp = d3[\"interpolatePlasma\"];\n\nlet animationInter = null;\nlet warned = false;\nlet endAnimation = false;\nlet isAnimating = false;\n\nfunction playAnimation(poly, t) {\n  if (!isAnimating) {\n    isAnimating = true\n    animate(poly, t)  \n  }\n}\n\n\nasync function animate(poly, t) {\n\n  function update() {\n    let index = associahedron.animIndex\n    let cw = codewords[index];\n    polySvg.call(poly.codeword(cw));\n    treeSvg.call(t.update(poly));\n    select(\"#codeword-menu\").property(\"selectedIndex\", index + 1);\n    codewordHeader.text(`Codeword: ${cw}`);\n  }\n  let started = poly.treePath().length == 0\n  \n\n  await new Promise(resolve => {\n    setTimeout(() => resolve(), 1000);\n  });\n\n  while (!associahedron.finishedAnimation() && !endAnimation) {\n    if (endAnimation) {\n      break\n    }\n    update()\n    let timeout = 0\n    if (started) {\n      started = false\n      timeout = 250 * poly.N() + 1000\n    }\n    await new Promise(resolve => {\n      setTimeout(() => resolve(), Math.max(timeout, 1000));\n    });\n\n    if (endAnimation) {\n      break\n    }\n\n    await associahedron.moveToNext(1000);  \n  }\n\n  if (!endAnimation) {\n    update()\n  }\n  isAnimating = false\n}\n\n\nconst toggle = (disable) => {\n  select(\"#codeword-menu\").property(\"disabled\", disable);\n  select(\"#n-menu\").property(\"disabled\", disable);\n  select(\"#n-input\").property(\"disabled\", disable);\n  select(\"#start-button\").property(\"disabled\", disable);\n};\n\nlet associahedron = new Associahedron(2, {\"diameter\": 100, \"show_circle\": true, \"show_map\": false}, \"polygon-container\");\n \nfunction main() {\n  const cw = menu()\n    .id(\"codeword-menu\")\n    .labelText(\"Codeword:\")\n    .options(createCodewordOptions(codewords))\n    .on(\"focus\", () => {\n      const n = poly.N() - 2\n      if (!codewords.length || codewords[0].length != n) {\n        const cws = getCodeWords(n);\n        codewords = cws;\n        const options = createCodewordOptions(cws);\n        select(\"#codeword-menu\").property(\"selectedIndex\", -1);\n        codewordMenu.call(cw.options(options));\n      }\n    })\n    .on(\"change\", (cw) => {\n      let parsedCodeword = [];\n      if (cw != \"none\") {\n        parsedCodeword = cw.split(\",\");\n      } else {\n        poly.reset();\n      }\n      clearInterval(animationInter);\n      polySvg.call(poly.codeword(parsedCodeword));\n      codewordHeader.text(`Codeword: ${parsedCodeword}`);\n      codewordLabel.text(\"Type codeword and press Enter:  \").style(\"color\", \"black\");\n\n      endAnimation = true\n      if (cw != \"none\") {\n        associahedron.animateToCodeword(cw, 1000)\n        treeSvg.call(t.update(poly));\n      } else {\n        treeSvg.call(t.reset());\n      }\n    });\n\n  // const nChoiceMenu = menu()\n  //   .id(\"n-menu\")\n  //   .labelText(\"N:\")\n  //   .options(NOptions)\n  //   .on(\"focus\", () => {\n  //     const n = poly.N() - 2\n  //     const cws = getCodeWords(n);\n  //     codewords = cws;\n  //     const options = createCodewordOptions(cws);\n  //     select(\"#codeword-menu\").property(\"selectedIndex\", -1);\n  //     codewordMenu.call(cw.options(options));\n  //   })\n  //   .on(\"change\", (n) => {\n  //     const cws = getCodeWords(n);\n  //     codewords = cws;\n  //     const options = createCodewordOptions(cws);\n  //     select(\"#codeword-menu\").property(\"selectedIndex\", -1);\n  //     codewordMenu.call(cw.options(options));\n  //     clearInterval(animationInter);\n  //     polySvg.call(poly.N(+n + 2));\n  //     codewordHeader.text(`Codeword: ${[]}`);\n  //     treeSvg.call(t.update(poly));\n  //     codewordLabel.text(\"Enter codeword: \").style(\"color\", \"black\");\n  //   });\n\n  const restartButton = button()\n    .labelText(\"Restart\")\n    .id(\"restart-button\")\n    .on(\"click\", (_) => {\n      endAnimation = true\n      associahedron.resetAnimation()\n      associahedron.animateToCodeword(associahedron.codewords[0].c.w.join(\",\"), 1000)\n      polySvg.call(poly.reset());\n      treeSvg.call(t.reset());\n    });\n\n  const startButton = button()\n    .labelText(\"View Hamiltonian Path\")\n    .id(\"start-button\")\n    .on(\"click\", (_) => {\n      const n = poly.N() - 2\n      associahedron.resetAnimation()\n      associahedron.animateToCodeword(associahedron.codewords[0].c.w.join(\",\"), 1000)\n      if (!codewords.length || codewords[0].length != n) {\n        const cws = getCodeWords(n);\n        codewords = cws;\n        const options = createCodewordOptions(cws);\n        select(\"#codeword-menu\").property(\"selectedIndex\", -1);\n        codewordMenu.call(cw.options(options));\n      }\n      endAnimation = false\n      playAnimation(poly, t);\n    });\n\n  \n\n\n  const onNConfirm = (value) => {\n    const validationRegex = /^[1-9][0-9]*$/;\n    if (validationRegex.test(value)) {\n      const n  = parseInt(value)\n\n      if (+n + 2 == poly.N()) {\n        return\n      } \n      \n      if (n >= 2) {\n        endAnimation = true\n        // const cws = getCodeWords(n);\n        // codewords = cws;\n        // const options = createCodewordOptions(cws);\n        select(\"#codeword-menu\").property(\"selectedIndex\", -1);\n        // codewordMenu.call(cw.options(options));\n        clearInterval(animationInter);\n        poly.reset()\n        polySvg.call(poly.N(+n + 2));\n        codewordHeader.text(`Codeword: ${[]}`);\n        treeSvg.call(t.update(poly));\n        NInputLabel.text(\"Type N and press Enter: \").style(\"color\", \"black\");\n        exploreLink.text(\"Click to explore stack for n=\" + n).attr(\"href\", \"scrollStack.html?n=\" + n);\n        \n        d3.selectAll(\"#polygon-container_Canvas\") \n          .remove(); \n        associahedron = new Associahedron(+n, {\"diameter\": 80, \"show_circle\": true, \"show_map\": false}, \"polygon-container\");\n\n\n        if (n > 9 && !warned) {\n          warned = true\n          alert(\"Note: When viewing the codewords or visualizing the Hamiltonian path for n > 9, your browser may slow down, especially for larger values of n\")\n        }\n        \n      } else {\n        NInputLabel.text(\"N must be greater than 1.\").style(\"color\", \"red\");\n      }\n    } else {\n      NInputLabel.text(\"Invalid N.\").style(\"color\", \"red\");\n    }\n\n  }\n\n  const nInput = input()\n    .id(\"n-input\")\n    // .placeholder(\"2, 7, etc\")\n    .on(\"focusout\", (value) => {\n      onNConfirm(value)\n    })\n    .on(\"confirm\", (value) => {\n      onNConfirm(value)\n      \n    });\n\n\n\n  const onCodewordConfirm = (value) => {\n    value = value.replaceAll(\" \", \"\");\n    const validationRegex = /^(\\d+,)*\\d+$/;\n    if (validationRegex.test(value)) {\n      const codeword = value.split(\",\");\n      const n = poly.N();\n      if (codeword.length == n - 2 && isValidCodeword(codeword, n - 2)) {\n        endAnimation = true\n        clearInterval(animationInter);\n        polySvg.call(poly.codeword(codeword));\n        codewordHeader.text(`Codeword: ${codeword}`);\n        treeSvg.call(t.update(poly));\n        codewordLabel.text(\"Type codeword and press Enter: \").style(\"color\", \"black\");\n        associahedron.animateToCodeword(value, 1000)\n      } else {\n        codewordLabel.text(\"Invalid codeword.\").style(\"color\", \"red\");\n      }\n    } else {\n      codewordLabel.text(\"Invalid input.\").style(\"color\", \"red\");\n    }\n  }\n\n  const codewordInput = input()\n    .id(\"codeword-input\")\n    .on(\"focusout\", (value) => {\n      onCodewordConfirm(value)\n    })\n    .on(\"confirm\", (value) => {\n      onCodewordConfirm(value)\n    });\n\n  const poly = polygon()\n    .N(N + 2)\n    .codeword(codeword)\n    .radius(radius)\n    .pointSize(pointSize)\n    .pointColor(pointColor)\n    .strokeWidth(2)\n    .color(color)\n    .margin(margin)\n    .drawDelay(100)\n    .transDuration(1000)\n    .interp(interp)\n    .treeInterp(treeInterp)\n    .dash(\"3, 2\")\n    .fontSize(\"16px\")\n    .on(\"animstart\", (_) => toggle(true))\n    .on(\"animend\", (_) => toggle(false));\n\n  startAnimationButton.call(startButton);\n  restartDrawButton.call(restartButton);\n  inputButton.call(codewordInput);\n  codewordMenu.call(cw);\n  NInput.call(nInput);\n  polySvg.call(poly);\n  // NMenu.call(nChoiceMenu);\n\n  const t = tree()\n    .width(treeWidth)\n    .height(treeHeight)\n    .nodes({})\n    .margin(treeMargin)\n    .transDuration(1000)\n    .interp(interp)\n    .treeInterp(treeInterp)\n    .maxXTransform(50)\n    .nodeSize(4);\n  treeSvg.call(t);\n}\n\nmain();\n"],"names":["getCodeWords","n","UP","DOWN","codeword","Array","fill","direction","pushPoint","maxValue","codeWordList","initialize","j","push","generate_all_trees","position","i","pull","isValidCodeword","cw","isValid","nums","map","v","sum","wi","s","w0","formatKey","start","end","keyFromArr","arr","join","parseKey","key","split","idxFunction","N","idx","createEdge","p1","p2","depth","x","y","x_diff","y_diff","dist","Math","hypot","midpoint","start_idx","end_idx","getKey","createPolygonPoints","r","leftOffset","topOffset","points","inc","PI","theta","r_x","r_y","cos","sin","vec_x","vec_y","mag","sqrt","ux","uy","point","reverse","createPolygonEdges","edges","length","curr_point","next_point_idx","next_point","edge","createTriangles","polygonEdges","interiorEdges","solution","maxDepth","nodes","triangles","interiorMap","interiorN","rootKey","getWrapIndex","fillCrossings","crossings","left","right","parent","value","leaf","inorderPos","polyEdgesUsed","used","Set","range","edgeStack","startIndex","iterOrder","code","edgePoint","ind","tri","node","checkRange","e","parentKey","delete","pop","rootNode","lastTriangle","forEach","from","triangleIndexes","parentArr","indexes","triKey","tris","createTriangleFromIndex","bfs","queue","getCentroid","shift","currEdge","neighborEdge","startPoint","endPoint","neighborNode","max","getCodewordEdges","findCodeEdges","all_edges","centroid","p3","triIndexes","indexSet","add","createTriangle","positionEdges","e1","e2","new_res","numbers","keys","unusedIndex","idxDict","count","unused","undefined","next","polygon","color","pointColor","radius","pointSize","margin","transDuration","strokeWidth","dash","fontSize","drawDelay","lastEdges","interp","treeInterp","treePath","listeners","dispatch","my","selection","top","treeInfo","Object","values","t","transition","duration","pointLine","line","d","positionLines","lines","attr","initializeRadius","circles","growRadius","enter","positionCircles","enterCircles","call","positionText","text","_","calculateDashArr","dashLength","a","parseFloat","reduce","b","dashCount","ceil","newDashes","dashArray","exitLines","selectAll","data","append","update","exit","remove","select","slice","on","delay","then","arguments","reset","apply","menu","id","labelText","options","event","target","input","placeholder","button","tree","width","height","maxXTransform","nodeSize","d3","cluster","links","root","hierarchy","children","treeData","descendants","poly","MAP_HEIGHT","arrsum","res","arrstr","sep","arrInArr","inarr","found","equals","k","Codeword","constructor","w","Int32Array","get_edges","min_idx","visible","draw","g","c","rgb","stroke_width","dTheta","Xx","Tx","Xy","Ty","includes","rg","font_weight","val","style","Associahedron","opts","domStr","diam","g_x_offset","g_y_offset","container","document","getElementById","addEventListener","preventDefault","window","innerWidth","innerHeight","createElement","appendChild","canvasDOM","canvas","drag","dragNode","bind","obj","xoffset","yoffset","cg","show_map","mg","stack_index","codewords","last_codeword","codeword_obj","make_stack_rec","initializeMap","resetAnimation","animIndex","finishedAnimation","moveToNext","moveTime","c1","s1","c2","s2","newStack","message","Promise","resolve","setTimeout","updateMap","animateToCodeword","dx","dy","mouseDown","mouse","currentTarget","show","hide","that","lg","y_offset","h","x_offset","y1","n_items","vals","stackorder","ival","ni","dotted_edges","circled_vertices","y2","x1","x2","bottom","treeMargin","treeWidth","treeHeight","mapCodewords","cws","createCodewordOptions","noneOption","concat","codewordHeader","exploreLink","menuContainer","polySvg","treeSvg","NInputLabel","NInput","codewordMenu","codewordLabel","inputButton","startAnimationButton","restartDrawButton","animationInter","warned","endAnimation","isAnimating","playAnimation","animate","index","associahedron","property","started","timeout","toggle","disable","main","parsedCodeword","clearInterval","restartButton","startButton","onNConfirm","validationRegex","test","parseInt","alert","nInput","onCodewordConfirm","replaceAll","codewordInput"],"mappings":"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"}